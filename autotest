#require 'autotest/growl'
require 'autotest/redgreen'
require '~/.autotest.d/sound/sound.rb'  # needs "sudo port install mpg321"
Autotest::Sound.sound_path = "~/.autotest.d/sound/sound_fx/"

module Autotest::Growl
  def self.growl(title, message, pass = nil)
    priority = pass ? -2 : 2
    image = pass ? '~/.autotest.d/rails_ok.png' : '~/.autotest.d/rails_fail.png'
    sticky = false # !pass
    switches = "-s" if sticky
    system "growlnotify -n autotest --image #{image} -p #{priority} -m #{message.inspect} #{title.inspect} #{switches}"
  end

  Autotest.add_hook :ran_command do |at|
    results = at.results.last.chomp
    if results.match(/^.* (\d+) failures, (\d+) errors$/)
      error_count = $1.to_i + $2.to_i
      if (error_count.zero?)
        growl "Tests Passed", "#{results}", :pass # if at.tainted
      else
        growl "Tests Failed", "#{results}"
      end
    end
  end
  
  Autotest.add_hook :all_good do |at|
    growl "Tests Passed", "All tests passed", :pass if at.tainted
  end
end

class Autotest
  def find_files_with_flymake
    result = find_files_without_flymake
    result.reject { |key, value| key =~ /_flymake\.rb$/ }
  end
  alias_method :find_files_without_flymake, :find_files
  alias_method :find_files, :find_files_with_flymake
end

# Autotest.send(:alias_method, :real_make_test_cmd, :make_test_cmd)
# Autotest.send(:define_method, :make_test_cmd) do |*args|
#   real_make_test_cmd(*args).sub('test/unit', %[rubygems -e "require 'redgreen'"])
# end

